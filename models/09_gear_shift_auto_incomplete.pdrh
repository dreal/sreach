// Incomplete - needs modifications



#define x1init 0
#define x2init 1 
#define thre1 1.5
#define diff 0.5
#define thre2 (thre1 + diff)
#define thre3 (thre2 + diff)
#define thre4 (thre3 + diff)
#define pi 3.1416


N(1, 0.0001) mu1;
N(1.7, 0.0001) mu2;
N(3.5, 0.0001) mu3;
N(4, 0.0001) mu4;
U(0.49, 0.51) theta1;
U(0.49, 0.51) theta2;
U(0.49, 0.51) theta3;
U(0.49, 0.51) theta4;
U(10, 11) thro; 

[0, 1000] x1;
[0, 1000] x2;
[0, 3] time;




{ mode 1;

  invt:
        
  flow:
        d/dt[x1] = x2;
	d/dt[x2] = thro * (1 / (theta1 * sqrt(2 * pi))) * exp(0 - ((x2 - mu1) ^ 2) / (2 * theta1 ^ 2));
  jump:
        (x2 >= thre2) ==> @2 (and (x1' = x1) (x2' = x2));
}
{ mode 2;

  invt:
          
  flow:
        d/dt[x1] = x2;
	d/dt[x2] = thro * (1 / (theta2 * sqrt(2 * pi))) * exp(0 - ((x2 - mu2) ^ 2) / (2 * theta2 ^ 2));
  jump:
        (x2 >= thre3) ==> @3 (and (x1' = x1) (x2' = x2));
	(x2 <= thre1) ==> @1 (and (x1' = x1) (x2' = x2));
}
{ mode 3;

  invt:
        
  flow:
        d/dt[x1] = x2;
	d/dt[x2] = thro * (1 / (theta3 * sqrt(2 * pi))) * exp(0 - ((x2 - mu3) ^ 2) / (2 * theta3 ^ 2));
  jump:
        (x2 >= thre4) ==> @4 (and (x1' = x1) (x2' = x2));
	(x2 <= thre2) ==> @2 (and (x1' = x1) (x2' = x2));
}
{ mode 4;

  invt:
        
  flow:
        d/dt[x1] = x2;
	d/dt[x2] = thro * (1 / (theta4 * sqrt(2 * pi))) * exp(0 - ((x2 - mu4) ^ 2) / (2 * theta4 ^ 2));
  jump:
        (x2 <= thre3) ==> @3 (and (x1' = x1) (x2' = x2));
}
init:
@1	(and (x1 = x1init) (x2 = x2init));

goal:
@2     (x2 >= thre3);
